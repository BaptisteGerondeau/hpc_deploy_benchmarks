---
- hosts: localhost
  roles:
    - role: ansible-role-provision-mr-provisioner
      mr_provisioner_do_provision: False

  tasks:
    - name: Retrieve IP of Machine from MrP
      mr_provisioner_get_ip:
        mrp_url: "{{ mr_provisioner_url }}"
        mrp_token: "{{ mr_provisioner_token }}"
        machine_name: "{{ mr_provisioner_machine_name }}"
        interface_name: "{{ mr_provisioner_interface_name|default('eth1') }}"
      register: get_ip
    - debug: var=get_ip

    - name: Add machine to hosts as target
      add_host:
              name: "{{ get_ip['ip'] }}"
              groups: target
              ansible_user: root
              ansible_ssh_extra_args: "-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null"
      when: get_ip['ip'] is defined and get_ip['ip'] != ""

- hosts: target
  tasks:
    - include_tasks: ./tasks/debian_deps.yml
      when: ansible_distribution == "Debian"

    - include_tasks: ./tasks/centos_deps.yml
      when: ansible_distribution == "CentOS"

    - include_tasks: ./tasks/opensuse_deps.yml
      when: ansible_distribution == "OpenSUSE"

    - name: Get the benchmark_harness
      git:
          repo: https://github.com/Linaro/benchmark_harness.git
          dest: "/root/benchmark_harness"
          version: "{{ branch | default('master') }}"

    - name: Install pip requirements
      shell: python3 -m pip install -r /root/benchmark_harness/requirements.txt

    - name: Wipe results directory
      file:
          path: "/root/jenkins/"
          state: "{{ item }}"
      with_items:
          - absent
          - directory

    - name: Call the benchmark_harness
      shell: './benchmark_controller.py {{benchmark|default("") }} {{machine_type|default("") }} {{compiler|default("") }} "--compiler-flags={{compiler_flags|default("") }}" "--link-flags={{link_flags|default("") }}" "--benchmark-options={{benchmark_options|default("") }}" "--benchmark-build-deps={{benchmark_build_deps|default("") }}" "--benchmark-run-deps={{benchmark_run_deps|default("") }}" "--benchmark-root="/root/jenkins/"" "--sftp-user={{ sftp_user }}"'
      args:
        chdir: /root/benchmark_harness/
      register: benchmark_call_output
    - debug: var=benchmark_call_output.stderr_lines

    - name: Find the path to the results
      find:
        paths: /root/jenkins
        patterns: '{{ benchmark }}*'
        file_type: directory
      register: benchresults_path
    - debug: var=benchresults_path

    - name: Find results
      find:
        paths: "{{ item.path }}/results/"
        patterns: '*.report'
      with_items: "{{ benchresults_path.files }}"
      register: reports_path
    - debug: var=reports_path

    - name: Make a directory with a nice name for sftp
      file:
        path: "/root/jenkins/{{ sftp_dirname }}"
        state: directory

    - name: Copy results
      copy:
        src: "{{ item.path }}"
        dest: "/root/jenkins/{{ sftp_dirname}}/{{ item.path | basename }}"
        remote_src: yes
      with_items: "{{ reports_path.results[0].filesÂ }}"

    - name: Copy results to fileserver
      shell: (echo "put -r /root/jenkins/{{ sftp_dirname }}" && echo "exit") | sftp -o ForwardAgent=yes -o ConnectTimeout=60 -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no  {{sftp_user}}@{{ sftp_server_ip }}:/benchmark/{{ vendor }}

    - name: Remove the old dir
      file: 
        state: absent
        path: "{{ item.path }}/"
      with_items: "{{ benchresults_path.files }}"

    - name: Remove the nicely named sftp dir
      file:
        state: absent
        path: "/root/jenkins/{{ sftp_dirname }}/"
